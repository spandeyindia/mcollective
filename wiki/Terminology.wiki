#summary Common terminology used
#labels Featured,Phase-Reference

= Introduction =

This page documents the various terms used in relation to mcollective.

<wiki:toc max_depth="2" />

== Server ==
The mcollective daemon, an app server for hosting Agents and managing the connection to your Middleware.

== Node ==
The Computer or Operating System that the Server runs on.

== Plugins ==
Ruby code that lives inside the server and takes on roles like security, connection handling, agents and so forth.  See [http://en.wikipedia.org/wiki/Plugin Wikipedia]

== Middleware ==
A [http://en.wikipedia.org/wiki/Publish_subscribe publish subscribe] based system like [http://activemq.apache.org/ Apache ActiveMQ].

== Connector ==
A plugin of the type _MCollective::Connector_ that handles the communication with your chosen Middleware.

== Name Space ==
Currently messages are sent to the middleware directed at topics named _/topic/mcollective.package/command_ and replies come back on _/topic/mcollective.package/reply_.

In this example the namespace is "mcollective" and all servers and clients who wish to form part of the same Collective must use the same name space. 

Middleware can generally carry several namespaces and therefore several Collectives.

== Collective ==
A combination of Servers, Nodes and Middleware all operating in the same Namespace.

Multiple collectives can be built sharing the same Middleware but kept separate by using different Namespaces.

== Agent == 
A block of Ruby code that performs a specific role, the main reason for mcollective's existence is to host agents.  Agents can perform tasks like manipulate firewalls, services, packages etc. See [http://en.wikipedia.org/wiki/Software_agent Wikpedia].

== Facts ==
Discreet bits of information about your nodes. Examples could be the domain name, country, role, operating system release etc.

Facts are provided by plugins of the type _MCollective::Facts_.

== Registration ==
Servers can send regular messages to an agent called _registration_.  The code that sends the registration messages are plugins of the type _MCollective::Registration_

== Security ==
A plugin of the type _MCollective::Security_ that takes care of encryption, authentication and encoding of messages on which will then be passed on to the Connector for delivery to the Collective.

== Client ==
Software that produce commands for agents to process, typically this would be a computer with the client package installed and someone using the commands like _mc-package_ to interact with Agents.

Often clients will use the _MCollective::Client_ library to communicate to the Collective

== User ==
Servers and Clients all authenticate to the Middleware, user would generally refer to the username used to authenticate against the middleware.