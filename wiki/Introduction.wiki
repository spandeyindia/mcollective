#summary Introducing MCollective
#labels Featured
= Introduction =

The Marionette Collective aka. mcollective is a framework to build server orchestration or parallel job execution systems.

Primarily we'll use it as a means to programmatically execute actions on clusters of servers.  In this regard we operate in the same space as tools like [https://fedorahosted.org/func/ Func], [http://fabfile.org/ Fabric] or [http://www.capify.org Capistrano].  

We've attempted to think out of the box a bit designing this system by not relying on central inventories and tools like SSH, we're not simply a fancy SSH "for loop".  MCollective uses modern tools like [http://en.wikipedia.org/wiki/Publish/subscribe Publish Subscribe Middleware] and modern philosophies like real time discovery of network resources using meta data and not hostnames.  Delivering a very scalable and very fast parallel execution environment.

To get an immediate feel for what I am on about you can look at some of the videos on the [Screencasts] page and then keep reading below for further info and links.

== What is MCollective and what does it allow you to do ==

 * Interact with small to very large clusters of servers
 * Use a [MessageFlow broadcast paradigm for request distribution].  All servers get all requests at the same time, requests have filters attached and only servers matching the filter will act on requests.  There is no central asset database to go out of sync, the network is the only source of truth
 * Break free from ever more complex naming conventions for hostnames as a means of identity.  Use a very rich set of meta data provided by each machine to address them.  Meta data comes from [UsingWithPuppet Puppet], [UsingWithChef Chef], [http://code.google.com/p/mcollective-plugins/wiki/FactsRLFacter Facter] (community), [http://code.google.com/p/mcollective-plugins/wiki/FactsOpsCodeOhai Ohai] (community) [WritingFactsPlugins or plugins you provide yourself].   
 * Comes with simple to use command line tools to call remote agents.
 * A number of agents to manage packages, services and other common components are [http://code.google.com/p/mcollective-plugins/ available from the community].
 * Allows you to write [SimpleRPCIntroduction simple RPC style agents, clients] and Web UIs in an easy to understand language - Ruby
 * Extremely pluggable and adaptable to local needs
 * Middleware systems already have rich [SecurityWithActiveMQ authentication and authorization models], leverage these and do not try to re-develop a new authentication system.
 * Re-use the ability of middleware to do [ActiveMQClusters clustering, routing and network isolation] to realize secure and scalable setups.

== Pluggable Core ==

We aim to provide a stable core framework that allows you to build it out into a system that meets your own needs, we are pluggable in the following areas:

 * Replace our choice of middleware - STOMP compliant middleware - with your own like AMQP based.
 * Replace our authorization system with one that suits your local needs
 * Replace our serialization - Ruby Marshal based - with your own like [http://json-schema.org/ JSONSchema] that is cross language.
 * Add sources of data, we support [UsingWithChef Chef] and [UsingWithPuppet Puppet].   You can [WritingFactsPlugins provide a plugin to give us access to your tools data].  The community have ones for [http://code.google.com/p/mcollective-plugins/ Facter and Ohai already]
 * Create a central inventory of services [Registration leveraging MCollective as transport] that can run and distribute inventory data on a regular basis.

MCollective is licensed under the Apache 2 license.

== Next Steps and Further Reading ==

Introductory and Tutorial Pages:
 * See it in action in our [Screencasts]
 * Read the [GettingStarted Getting Started] and [ConfigurationReference Configuration] guides for installation instructions
 * Read the [Terminology] page if you see any words where the meaning in the context of MCollective is not clear
 *  Learn how to write simple Agents and Clients using our [SimpleRPCIntroduction  Simple RPC Framework]
 * The author maintains some agents and clients on another project [http://code.google.com/p/mcollective-plugins/ here].
 * The author has written [http://www.devco.net/archives/tag/mcollective several blog posts] about mcollective.
 * Subscribe and post questions to the mailing list. [http://groups.google.com/group/mcollective-users]
 
Internal References and Developer Docs:
 * Finding it hard to do something complex with Simple RPC? See [WritingAgents] for what lies underneath
 * Role based security, authentication and authorization using [SecurityWithActiveMQ ActiveMQ]
 * Structure of [MessageFormat Request and Reply] messages
 * Writing [WritingFactsPlugins new fact sources] for meta data