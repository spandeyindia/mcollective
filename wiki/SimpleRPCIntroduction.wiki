#summary Introduction to using Simple RPC
#labels Phase-Reference,SimpleRPC

= Introduction =

MCollective is a framework for writing feature full agents and clients and provides a [WritingAgents rich system to do that].  MCollective's native Client though is very low level, a bit like TCP/IP is to HTTP.  Like TCP/IP the native client does not provide any Authentication, Authorization etc.

MCollective Simple RPC is a framework on top of the standard client that abstracts away a lot of the complexity and provides a lot of convention and standards.  It's a bit like using HTTP ontop of TCP/IP to create REST services.

SimpleRPC is a framework that provides the following:

 * Provide simple conventions for writing [SimpleRPCAgents agents] and [SimpleRPCClients clients], favoring convention over custom design
 * Very easy to write agents including input validation and a sensible feedback mechanism in case of error
 * Provide [SimpleRPCAuditing audit logging] abilities of calls to agents
 * Provide the ability to do [SimpleRPCAuthorization fine grain Authorization] of calls to agents and actions.
 * Has a [SimpleRPCDDL Data Definition Language] used to describe agents and assist in giving hints to auto generating user interfaces.
 * The provided generic calling tool should be able to speak to most compliant agents
 * Should you need to you can still write your own clients, this should be very easy too
 * Return data should be easy to print, in most cases the framework should be able to print a sensible output with a single, provided, function.  The [SimpleRPCDDL] is used here to improve the standard one-size-fits-all methods.
 * The full capabilities of the standard Client classes should still be exposed in case you want to write advanced agents and clients


*NOTE: This feature is available from version 0.4 of MCollective*

We've provided full tutorials on [SimpleRPCAgents Writing Simple RPC Agents] and [SimpleRPCClients Clients].  There is also a [http://mcollective.blip.tv/file/3808928/ screencast that will give you a quick look at what is involved in writing agents].


A bit of code probably says more than lots of English, so here's a simple hello world Agent, it just echo's back everything you send it in the _:msg_ argument:

{{{
module MCollective
    module Agent
        class Helloworld<RPC::Agent
            # Basic echo server
            def echo_action
                validate :msg, String
     
                reply.data = request[:msg]
            end
        end
    end
end
}}}

The nice thing about using a standard abstraction for clients is that you often won't even need to write a client for it, we ship a standard client that you can use to call the agent above:

{{{
$ mc-rpc --agent helloworld --action echo --arg msg="Welcome to MCollective Simple RPC"
Determining the amount of hosts matching filter for 2 seconds .... 1
                                        
devel.your.com                          : OK
    "hello world"



---- rpctest#echo call stats ----
           Nodes: 1
      Start Time: Wed Dec 23 20:49:14 +0000 2009
  Discovery Time: 0.00ms
      Agent Time: 54.35ms
      Total Time: 54.35ms
}}}

You could also use _mc-rpc_ like this and achieve the same result:

{{{
$ mc-rpc helloworld echo msg="Welcome to MCollective Simple RPC"
}}}

For multiple options just add more _key=val_ pairs at the end

But you can still write your own clients, it's incredibly simple, full details of a client is out of scope for the introduction - see the [SimpleRPCClients] page instead for full details - but here is some sample code to do the same call as above including full discovery and help output:

{{{
#!/usr/bin/ruby
 
require 'mcollective'
 
include MCollective::RPC
 
mc = rpcclient("helloworld")

printrpc mc.echo(:msg => "Welcome to MCollective Simple RPC")

printrpcstats
}}}

With a standard interface come a lot of possibilities, just like the standard one-size-fits-all CLI client above you can make web interfaces, there's a [http://code.google.com/p/mcollective/source/browse/trunk/ext/mc-rpc-restserver.rb simple MCollective <-> REST bridge in the ext directory].