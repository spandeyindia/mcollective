#summary Getting started guide for initial release

= Getting Started =

Below find a rough guide to get you going, this assumes the client and server is on the same node, but servers don't need the client code installed.

For an even quicker intro to how it all works you can try our [EC2Demo EC2 based demo]

== Requirements ==
We try to keep the requirements on external Gems to a minimum, you only need:

  * A Stomp server, tested against [http://activemq.apache.org/ ActiveMQ]
  * Ruby
  * Rubygems
  * [http://stomp.codehaus.org/Ruby+Client Ruby Stomp Client] *NOTE: You need version 1.1 as the newer versions are broken and do not work with multi threaded servers*

== ActiveMQ ==
I've developed this against ActiveMQ.  It should work against other Stomp servers but I suspect if you choose one without username and password support you might have problems, please let me know if that's the case and I'll refactor the code around that.

Full details on setting up and configuring ActiveMQ is out of scope for this, below should help you get stomp and a user going though. For their excellent full docs please see  http://activemq.apache.org/

I've tested against ActiveMQ 5.2 and 5.3.

A spec file can be found in the _ext_ directory in SVN that can be used to build RPMs for RedHat/CentOS/Fedora you need _tanukiwrapper_ which you can find from _jpackage_, it runs fine under OpenJDK that comes with recent versions of these Operating Systems.  I've uploaded some RPMs and SRPMs [http://www.marionette-collective.org/activemq/ here].

=== Configuring Stomp ===
First you should configure ActiveMQ to listen on the Stomp protocol

And then you should add a user or two, to keep it simple we'll just add one user, the template file will hopefully make it obvious where this goes, it should be in the _broker_ block:

*Note: This config is for ActiveMQ 5.3*

{{{
<beans
  xmlns="http://www.springframework.org/schema/beans"
  xmlns:amq="http://activemq.apache.org/schema/core"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd   
  http://activemq.apache.org/camel/schema/spring http://activemq.apache.org/camel/schema/spring/camel-spring.xsd">

   <broker xmlns="http://activemq.apache.org/schema/core" brokerName="localhost" useJmx="true">
    <transportConnectors>
       <transportConnector name="openwire" uri="tcp://0.0.0.0:6166"/>
       <transportConnector name="stomp"   uri="stomp://0.0.0.0:6163"/>
    </transportConnectors>

    <plugins>
      <simpleAuthenticationPlugin>
        <users>
          <authenticationUser username="mcollective" password="marionette" groups="systemusers,everyone"/>
        </users>
      </simpleAuthenticationPlugin>

      <authorizationPlugin>
        <map>
          <authorizationMap>
            <authorizationEntries>
              <authorizationEntry topic="mcollective.>" write="systemusers" read="systemusers" admin="systemusers" />
              <authorizationEntry topic="ActiveMQ.Advisory.>" read="everyone,all" write="everyone,all" admin="everyone,all"/>
            </authorizationEntries>
          </authorizationMap>
        </map>
      </authorizationPlugin>
    </plugins>
   </broker>
</beans>
}}}

This creates a user _mcollective_ with the password _marionette_ and give it access to read/write/admin _/topic/mcollective.`*`_.

For further info about ActiveMQ settings you might need see [SecurityWithActiveMQ] and [http://www.devco.net/archives/2009/11/10/activemq_clustering.php ActiveMQ Clustering].

== mcollective ==
=== Download and Extract ===
Grab a copy of the mcollective ideally you'd use a package for your distribution else there's a tarfile that you can use, you can extract it wherever you want, the RPMs or deps will put files in Operating System compatible locations.  If you use the tarball you'll need to double check all the paths in the config files below.

=== Configure ===
You'll need to tweak some configs in _/etc/mcollective/client.cfg_, a full reference of config settings can be found here [ConfigurationReference]:

Mostly what you'll need to change is the _identity_, _plugin.stomp.`*`_ and the _plugin.psk_:

{{{
# main config
topicprefix = /topic/mcollective
libdir = /usr/libexec/mcollective
logfile = /dev/null
loglevel = debug
identity = fqdn

# connector plugin config
connector = stomp
plugin.stomp.host = stomp.your.net
plugin.stomp.port = 6163
plugin.stomp.user = unset
plugin.stomp.password = unset

# security plugin config
securityprovider = psk
plugin.psk = abcdefghj
}}}

You should also create _/etc/mcollective/server.cfg_ here's a sample, , a full reference of config settings can be found here [ConfigurationReference]:

{{{
# main config
topicprefix = /topic/mcollective
libdir = /usr/libexec/mcollective
logfile = /var/log/mcollective.log
daemonize = 1
keeplogs = 1
max_log_size = 10240
loglevel = debug
identity = fqdn
registerinterval = 300

# connector plugin config
connector = stomp
plugin.stomp.host = stomp.your.net
plugin.stomp.port = 6163
plugin.stomp.user = mcollective
plugin.stomp.password = password

# facts
factsource = yaml
plugin.yaml = /etc/mcollective/facts.yaml

# security plugin config
securityprovider = psk
plugin.psk = abcdefghj
}}}

Replace the _plugin.stomp.host_ with your server running ActiveMQ and replace the _plugin.psk_ with a Pre-Shared Key of your own.

=== Create Facts ===
By default - and for this setup - we'll use a simple YAML file for a fact source, later on you can use Reductive Labs Facter or something else.

Create _/etc/mcollective/facts.yaml_ along these lines:

{{{
---
location: devel
country: uk
}}}

=== Start the Server ===
If you installed from a package start it with the RC script, else look in the source you'll find a LSB compatible RC script to start it.

=== Test from a client ===
If all is setup you can test with the client code:

{{{
% mc-ping 
your.domain.com                           time=74.41 ms

---- ping statistics ----
1 replies max: 74.41 min: 74.41 avg: 74.41
}}}

This sent a simple 'hello' packet out to the network and if you started up several of the _mcollectived.rb_ processes on several machines you would have seen several replies, be sure to give each a unique _identity_ in the config.

At this point you can start exploring the discovery features for example:

{{{
% mc-find-hosts --with-fact country=uk
your.domain.com
}}}

This searches all systems currently active for ones with a fact _country=uk_, it got the data from the yaml file you made earlier.

If you use confiuration management tools like puppet and the nodes are setup with classes with _classes.txt_ in _/var/lib/puppet_ then you can search for nodes with a specific class on them - the locations will configurable soon:

{{{
% mc-find-hosts --with-class common::linux
your.domain.com
}}}

Chef does not yet support such a list natively but we have some details on the wiki to achieve the same with Chef.

The filter commands are important they will be the main tool you use to target only parts of your infrastructure with calls to agents.

See the _--help_ option to the various _mc-`*`_ script for available options.  You can now look at some of the available plugins and play around, you might need to run the server process as root if you want to play with services etc.

=== Plugins ===
We provide limited default plugins, you can look on our sister project [http://code.google.com/p/mcollective-plugins/] where you will find various plugins to manage packages, services etc.

== Further Reading ==
From here you should look at the rest of the wiki pages some key pages are:

 * [Screencasts] - Get a hands-on look at what is possible
 * [Terminology]
 * [SimpleRPCIntroduction Introduction to Simple RPC] - a simple to use framework for writing clients and agents
 * [ControllingTheDaemon] Controlling a running daemon